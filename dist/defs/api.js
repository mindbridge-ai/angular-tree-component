
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"api.js","sourceRoot":"","sources":["../../lib/defs/api.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Welcome to ng2tree\n */\nexport type IDType = string | number;\nexport type IDTypeDictionary = { [id: string]: boolean, [id: number]: boolean };\n\n/**\n * See ITreeNode for documentation\n */\nexport declare type TreeNode = any;\n\nexport interface IAllowDropFn {\n  (element: any, to: {parent: TreeNode, index: number}, $event?: any): boolean;\n}\n\nexport interface INodeHeightFn {\n  (node: TreeNode): number;\n}\n\nexport interface IAllowDragFn {\n  (node: TreeNode): boolean;\n}\n\n\nexport interface ITreeState {\n  expandedNodeIds?: IDTypeDictionary;\n  selectedNodeIds?: IDTypeDictionary;\n  activeNodeIds?: IDTypeDictionary;\n  hiddenNodeIds?: IDTypeDictionary;\n  selectedLeafNodeIds?: IDTypeDictionary;\n  focusedNodeId?: IDType;\n}\n\nexport interface ITreeOptions {\n   /**\n    * A string representing the attribute of the node that indicates whether there are child nodes.\n\n    * **Default value: `hasChildren`.**\n\n    For example, if your nodes have an `isDirectory` attribute that indicates whether there are children, use:\n    ```\n      options = { hasChildrenField: 'isDirectory' }\n    ```\n    */\n   hasChildrenField?: string;\n   /**\n    * A string representing the attribute of the node that contains the array of children.\n\n    * **Default value: `children`.**\n\n    For example, if your nodes have a `nodes` attribute, that contains the children, use:\n    ```\n      options = { childrenField: 'nodes' }\n    ```\n    */\n   childrenField?: string;\n   /**\n    * A string representing the attribute of the node to display.\n\n    * **Default value: `name`**\n\n      For example, if your nodes have a `title` attribute that should be displayed, use:\n      ```\n        options = { displayField: 'title' }\n      ```\n    */\n   displayField?: string;\n   /**\n    * A string representing the attribute of the node that contains the unique ID.\n      This will be used to construct the `path`, which is an array of IDs that point to the node.\n\n      * **Default value: `id`.**\n\n      For example, if your nodes have a `uuid` attribute, that contains the unique key, use:\n      ```\n        options = { idField: 'uuid' }\n      ```\n    */\n   idField?: string;\n   /**\n    * A string representing the attribute of the node that contains whether the node starts as expanded.\n\n      * **Default value: `isExpanded`.**\n\n      For example, if your nodes have an `expanded` attribute, that contains a boolean value, use:\n      ```\n        options = { isExpandedField: 'expanded' }\n      ```\n    */\n   isExpandedField?: string;\n   /**\n    * Function for loading a node's children.\n      The function receives a TreeNode, and returns a value or a promise that resolves to the node's children.\n\n      This function will be called whenever a node is expanded, the `hasChildren` (`options.hasChildrenField`)\n      field is true, and the `children` field is empty.\n      The result will be loaded into the node's children attribute.\n\n      Example:\n      ```\n      * options = {\n      *   getChildren: (node:TreeNode) => {\n      *     return request('/api/children/' + node.id);\n      *   }\n      * }\n      ```\n    */\n   getChildren?: (node: TreeNode) => any;\n   /**\n    * Rewire which trigger causes which action using this attribute, or create custom actions / event bindings.\n    * See the [Action Mapping Section](https://angular2-tree.readme.io/docs/action-mapping) for more details.\n    */\n   actionMapping?: any;\n   /**\n    * Specify if dragging tree nodes is allowed.\n    * This could be a boolean, or a function that receives a TreeNode and returns a boolean\n\n    * **Default value: false**\n\n    Example:\n    ```\n    * options = {\n    *  allowDrag: true\n    * }\n    ```\n    */\n   allowDrag?: boolean | IAllowDragFn;\n   /**\n    * Specify whether dropping inside the tree is allowed. Optional types:\n    *  - boolean\n    *  - (element:any, to:{parent:TreeNode, index:number}):boolean\n         A function that receives the dragged element, and the drop location (parent node and index inside the parent),\n         and returns true or false.\n\n    * **Default Value: true**\n\n    example:\n    ```\n    * options = {\n    *  allowDrop: (element, {parent, index}) => parent.isLeaf\n    * }\n    ```\n   */\n   allowDrop?: boolean | IAllowDropFn;\n    /**\n    Boolean flag to allow adding and removing is-dragging-over and is-dragging-over-disabled classes.\n\n    If set to false it will not add the above mentioned classes and you should handle the styling yourself with css and in\n    the actionMapping -> mouse -> dragEnter, dragLeave\n\n    * **Default Value: true**\n\n    example:\n    ```\n    * options = {\n    *   allowDrop: true,\n    *   allowDragoverStyling: false\n    * }\n    ```\n    */\n   allowDragoverStyling?: boolean;\n   /**\n   * Specify padding per node (integer).\n    Each node will have padding-left value of level * levelPadding, instead of using the default padding for children.\n\n    This option is good for example for allowing whole row selection, etc.\n\n    You can alternatively use the tree-node-level-X classes to give padding on a per-level basis.\n\n    * **Default value: 0**\n   */\n   levelPadding?: number;\n   /**\n    * Specify a function that returns a class per node. Useful for styling the nodes individually.\n\n      Example:\n      ```\n      * options = {\n      *   nodeClass: (node:TreeNode) => {\n      *     return 'icon-' + node.data.icon;\n      *   }\n      * }\n      ```\n    */\n   nodeClass?: (node: TreeNode) => string;\n   /**\n    Boolean flag to use the virtual scroll option.\n\n    To use this option, you must supply the height of the container, and the height of each node in the tree.\n\n    You can also specify height for the dropSlot which is located between nodes.\n\n    * **Default Value: false**\n\n    example:\n    ```\n    * options = {\n    *   useVirtualScroll: true,\n    *   nodeHeight: (node: TreeNode) => node.myHeight,\n    *   dropSlotHeight: 3\n    * }\n    ```\n    */\n   useVirtualScroll?: boolean;\n   /**\n    * For use with `useVirtualScroll` option.\n    * Specify a height for nodes in pixels. Could be either:\n    * - number\n    * - (node: TreeNode) => number\n\n    * **Default Value: 22**\n    */\n   nodeHeight?: number | INodeHeightFn;\n   /**\n    * For use with `useVirtualScroll` option.\n    * Specify a height for drop slots (located between nodes) in pixels\n\n    * **Default Value: 2**\n    */\n   dropSlotHeight?: number;\n   /**\n    * Boolean whether or not to animate expand / collapse of nodes.\n\n    * **Default Value: false**\n    */\n   animateExpand?: boolean;\n   /**\n    * Speed of expand animation (described in pixels per 17 ms).\n\n    * **Default Value: 30**\n    */\n   animateSpeed?: number;\n   /**\n    * Increase of expand animation speed (described in multiply per 17 ms).\n\n    * **Default Value: 1.2**\n    */\n   animateAcceleration?: number;\n   /**\n    * Whether to scroll to the node to make it visible when it is activated.\n\n    * **Default Value: true**\n    */\n   scrollOnActivate?: boolean;\n   /**\n    * Function to clone a node.\n    * Receives a TreeNode object, and returns a node object (only the data).\n    * This callback will be called when copying a node inside the tree,\n    * by either calling copyNode, or by dragging and holding the ctrl key\n    *\n    * For example:\n      ```\n        options: ITreeOptions = {\n          getNodeClone: (node) => ({\n            ...node.data,\n            id: uuid.v4(),\n            name: `copy of ${node.data.name}`\n          })\n        };\n      ```\n    *\n    * **Default Value: clone the node using Object.assign, and remove 'id' property**\n    */\n    getNodeClone?: (node: TreeNode) => any;\n    /**\n     * Makes the tree right-to-left.\n     * This include direction, expander style, and change key binding (right key collapse and left key expands instead of vice-versa)\n     */\n    rtl?: boolean;\n    /**\n     * Specifies id of root node (virtualRoot)\n     */\n    rootId?: any;\n    /**\n     * Whether to display a checkbox next to the node or not\n     */\n    useCheckbox?: boolean;\n    /**\n     * Whether to use master checkboxes mechanism if the useCheckbox is set to true\n     */\n    useTriState?: boolean;\n    /**\n     * The HTML element that is the scroll container for the tree.\n     * The default behaviour is to wrap the tree with a container that has overflow: hidden,\n     * and then the scrolling container is the viewport inside the tree component\n     */\n    scrollContainer?: HTMLElement;\n\n    /* Select and deselect events propogates lazily to child and parent nodes in tree*/\n    lazySelect?: boolean;\n }\n\nexport interface ITreeNode {\n  // properties\n  /**\n   * Parent node\n   */\n  parent: ITreeNode;\n  /**\n   * The value of the node's field that is used for displaying its content.\n   * By default 'name', unless stated otherwise in the options\n   */\n  displayField: string;\n  /**\n   * The children of the node.\n   * By default is determined by 'node.data.children', unless stated otherwise in the options\n   */\n  children: ITreeNode[];\n  /**\n   * Pointer to the original data.\n   */\n  data: any;\n  /**\n   * Pointer to the ElementRef of the TreeNodeComponent that's displaying this node\n   */\n  elementRef: any;\n  /**\n   * Level in the tree (starts from 1).\n   */\n  level: number;\n  /**\n   * Path in the tree: Array of IDs.\n   */\n  path: string[];\n  /**\n   * index of the node inside its parent's children\n   */\n  index: number;\n  /**\n   * A unique key of this node among its siblings.\n   * By default it's the 'id' of the original node, unless stated otherwise in options.idField\n   */\n  id: IDType;\n\n  // helpers\n  isExpanded: boolean;\n  isActive: boolean;\n  isFocused: boolean;\n  isCollapsed: boolean;\n  isLeaf: boolean;\n  hasChildren: boolean;\n  isRoot: boolean;\n\n  // traversing\n  /**\n   * @param skipHidden whether to skip hidden nodes\n   * @returns next sibling (or null)\n   */\n  findNextSibling(skipHidden): ITreeNode;\n  /**\n   * @param skipHidden whether to skip hidden nodes\n   * @returns previous sibling (or null)\n   */\n  findPreviousSibling(skipHidden): ITreeNode;\n  /**\n   * @param skipHidden whether to skip hidden nodes\n   * @returns first child (or null)\n   */\n  getFirstChild(skipHidden): ITreeNode;\n  /**\n   * @param skipHidden whether to skip hidden nodes\n   * @returns last child (or null)\n   */\n  getLastChild(skipHidden): ITreeNode;\n  /**\n   * Finds the visually next node in the tree.\n   * @param goInside whether to look for children or just siblings\n   * @returns next node.\n   */\n  findNextNode(goInside: boolean): ITreeNode;\n  /**\n   * Finds the visually previous node in the tree.\n   * @param skipHidden whether to skip hidden nodes\n   * @returns previous node.\n   */\n  findPreviousNode(skipHidden): ITreeNode;\n\n  /**\n   * @returns      true if this node is a descendant of the parameter node\n   */\n  isDescendantOf(node: ITreeNode): boolean;\n\n  /**\n   * @returns      in case levelPadding option is supplied, returns the current node's padding\n   */\n  getNodePadding(): string;\n\n  /**\n   * @returns      in case nodeClass option is supplied, returns the current node's class\n   */\n  getClass(): string;\n\n  // actions\n  /**\n   * Expands / Collapses the node\n   */\n  toggleExpanded();\n  /**\n   * Expands the node\n   */\n  expand();\n  /**\n   * Collapses the node\n   */\n  collapse();\n  /**\n   * Expands all ancestors of the node\n   */\n  ensureVisible();\n  /**\n   * Activates / Deactivates the node (selects / deselects)\n   */\n  toggleActivated(multi);\n  /**\n   * Focus on the node\n   */\n  focus();\n  /**\n   * Blur (unfocus) the node\n   */\n  blur();\n  /**\n   * Hides the node\n   */\n  hide();\n  /**\n   * Makes the node visible\n   */\n  show();\n  /**\n   * @param value  if true makes the node hidden, otherwise visible\n   */\n  setIsHidden(value: boolean);\n  /**\n   * Scroll the screen to make the node visible\n   */\n  scrollIntoView();\n  /**\n   * Fire an event to the renderer of the tree (if it was registered)\n   */\n  fireEvent(event: any);\n  /**\n   * Invokes a method for every node under this one - depth first\n   * @param fn  a function that receives the node\n   */\n  doForAll(fn: (node: ITreeNode) => any);\n  /**\n   * expand all nodes under this one\n   */\n  expandAll();\n  /**\n   * collapse all nodes under this one\n   */\n  collapseAll();\n  /**\n   * sets the node to active / inactive according to the value.\n   * If multi is true (default false) - does a multiselect.\n   */\n  setIsActive(value: boolean, multi?: boolean);\n  /**\n   * sets the node to be active and makes sure it's visible by expanding all nodes above it and scrolling it into view.\n   * Very similar to calling `activate`, `ensureVisible` and `scrollIntoView` methods.\n   * If multi is true (default false) - does a multiselect.\n   */\n  setActiveAndVisible(multi: boolean);\n}\n\nexport interface ITreeModel {\n  // properties\n  /**\n   * All root nodes\n   */\n  roots: ITreeNode[];\n  /**\n   * Current focused node\n   */\n  focusedNode: ITreeNode;\n  /**\n   * Options that were passed to the tree component\n   */\n  options: ITreeOptions;\n\n  /**\n   * Is the tree currently focused\n   */\n  isFocused: boolean;\n  /**\n   * @returns Current active nodes\n   */\n  activeNodes: ITreeNode[];\n  /**\n   * @returns Current expanded nodes\n   */\n  expandedNodes: ITreeNode[];\n\n  // helpers\n  /**\n   * @returns Current active node. If multiple nodes are active - returns the first one.\n   */\n  getActiveNode(): ITreeNode;\n  /**\n   * @returns Current focused node (either hovered or traversed with keys)\n   */\n  getFocusedNode(): ITreeNode;\n  /**\n   * Set focus on a node\n   * @param value  true or false - whether to set focus or blur.\n   */\n  setFocusedNode(node: ITreeNode);\n  /**\n   * @param skipHidden  true or false - whether to skip hidden nodes\n   * @returns      first root of the tree\n   */\n  getFirstRoot(skipHidden?: boolean): ITreeNode;\n  /**\n   * @param skipHidden  true or false - whether to skip hidden nodes\n   * @returns      last root of the tree\n   */\n  getLastRoot(skipHidden?: boolean): ITreeNode;\n  /**\n   * @returns      true if the tree is empty\n   */\n  isEmptyTree(): boolean;\n  /**\n   * @returns All root nodes that pass the current filter\n   */\n  getVisibleRoots(): ITreeNode[];\n  /**\n   * @param     path  array of node IDs to be traversed respectively\n   * @param     statrNode  optional. Which node to start traversing from\n   * @returns   The node, if found - null otherwise\n   */\n  getNodeByPath(path: any[], startNode?: ITreeNode): ITreeNode;\n  /**\n   * @param     id  node ID to find\n   * @returns   The node, if found - null otherwise\n   */\n  getNodeById(id: IDType): ITreeNode;\n  /**\n   * @param     predicate - either an object or a function, used as a test condition on all nodes.\n   *            Could be every predicate that's supported by lodash's `find` method\n   * @param     statrNode  optional. Which node to start traversing from\n   * @returns   First node that matches the predicate, if found - null otherwise\n   */\n  getNodeBy(predicate: any, startNode?: ITreeNode): ITreeNode;\n  /**\n   * get tree state\n   */\n  getState(): ITreeState;\n\n  // actions\n  /**\n   * Focuses or blurs the tree\n   * @param value  true or false - whether to set focus or blur.\n   */\n  setFocus(value: boolean);\n  /**\n   * Focuses on the next node in the tree (same as down arrow)\n   */\n  focusNextNode();\n  /**\n   * Focuses on the previous node in the tree (same as up arrow)\n   */\n  focusPreviousNode();\n  /**\n   * Focuses on the inner child of the current focused node (same as right arrow on an expanded node)\n   */\n  focusDrillDown();\n  /**\n   * Focuses on the parent of the current focused node (same as left arrow on a collapsed node)\n   */\n  focusDrillUp();\n  /**\n   * Marks isHidden field in all nodes recursively according to the filter param.\n   * If a node is marked visible, all of its ancestors will be marked visible as well.\n   * @param filter  either a string or a function.\n   *   In case it's a string, it will be searched case insensitively in the node's display attribute\n   *   In case it's a function, it will be passed the node, and should return true if the node should be visible, false otherwise\n   * @param autoShow  if true, make sure all nodes that passed the filter are visible\n   */\n  filterNodes(filter, autoShow?: boolean);\n  /**\n   * Marks all nodes isHidden = false\n   */\n  clearFilter();\n  /**\n   * moves a node from one location in the tree to another\n   * @param node describes which node needs to be moved\n   * @param to describes where to move the node to.\n   * @param from describes where to move the node from.\n   * Contains a 'parent' node, an 'index', and a 'dropOnNode' - to distinguish between dropping between nodes or on the node\n   */\n  moveNode(node: ITreeNode, to: {parent: ITreeNode, index: number, dropOnNode: boolean}, from: {parent: ITreeNode, index: number});\n  /**\n   * Invokes a method for every node of the tree - depth first\n   * @param fn  a function that receives the node\n   */\n  doForAll(fn: (node: ITreeNode) => any);\n  /**\n   * expand all nodes\n   */\n  expandAll();\n  /**\n   * collapse all nodes\n   */\n  collapseAll();\n  /**\n   * set tree state\n   */\n  setState(state: ITreeState);\n\n  subscribeToState(fn: (state: ITreeState) => any);\n}\n/**\n * This is the interface of the TreeNodeDrag service\n */\nexport interface ITreeNodeDrag {\n  /**\n   * Gets the current dragged node. Useful for overriding the drop action.\n   * @param node  The parent node of the current dragged node\n   * @param index  The index inside parent's children, of the current dragged node\n   */\n  getDragNode(): { node: TreeNode, index: number };\n}\n"]}